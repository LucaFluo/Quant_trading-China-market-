# Import all relevant libraries

%matplotlib inline
import matplotlib.pyplot as plt
import seaborn
plt.style.use('seaborn')
import matplotlib as mpl
mpl.rcParams['font.family'] = 'serif'
import warnings; warnings.simplefilter('ignore') 

import numpy as np
import pandas as pd

# tushare is a database of stocks in chinese main board
import tushare as ts

# Formatting the data set
data = ts.get_k_data('hs300', start = '2010-01-01', end='2019-06-30') 
data = pd.DataFrame(data)  
data.rename(columns={'close': 'price'}, inplace=True)
data.set_index('date', inplace = True)

# Computing moving average and plotting the plotting the chart
data['SMA_10'] = data['price'].rolling(10).mean()
data['SMA_60'] = data['price'].rolling(60).mean()
data[['price','SMA_10','SMA_60']].plot(title='HS300 stock price | 10 & 60 days SMAs',
                                       figsize=(10, 6))


# Setting the position signal and plotting signals
data['position'] = np.where(data['SMA_10'] > data['SMA_60'], 1, -1)
data.dropna(inplace=True)
data['position'].plot(ylim=[-1.1, 1.1], title='Market Positioning')

# Summarising the returns and plotting the strategy returns overall
data['returns'] = np.log(data['price'] / data['price'].shift(1))
data['returns'].hist(bins=35)
data['strategy'] = data['position'].shift(1) * data['returns'] 
data[['returns', 'strategy']].sum()

data[['returns', 'strategy']].cumsum().apply(np.exp).plot(figsize=(10, 6))

# Evaluating the risks (annual) involved, with focus in drawdown
data[['returns', 'strategy']].mean() * 252
data[['returns', 'strategy']].std() * 252 ** 0.5
data['cumret'] = data['strategy'].cumsum().apply(np.exp)
data['cummax'] = data['cumret'].cummax()
data[['cumret', 'cummax']].plot(figsize=(10, 6))
drawdown = (data['cummax'] - data['cumret'])
drawdown.max()


# Setting threshold to improve the whole strategy
hs300 = ts.get_k_data('hs300','2010-01-01', '2019-06-30')[['date','close']]
hs300.rename(columns={'close': 'price'}, inplace=True) 
hs300.set_index('date',inplace = True)

hs300['SMA_10'] = hs300['price'].rolling(10).mean() 
hs300['SMA_60'] = hs300['price'].rolling(60).mean()
hs300[['price', 'SMA_10', 'SMA_60']].plot(grid=True, figsize = (10,8))

hs300['10-60'] = hs300['SMA_10'] - hs300['SMA_60']
SD = 20                    
hs300['regime'] = np.where(hs300['10-60'] > SD, 1,0)
hs300['regime'] = np.where(hs300['10-60'] < -SD, -1,hs300['regime'])
hs300['regime'].value_counts()

hs300['Market'] = np.log(hs300['price']/hs300['price'].shift(1))
hs300['Strategy'] = hs300['regime'].shift(1) * hs300['Market']
hs300[['Market','Strategy']].cumsum().apply(np.exp).plot(grid=True, figsize = (10,8))
